package about

import (
	"github.com/hexops/vecty"
	router "marwan.io/vecty-router"
	"fmt"
	"sync"
	//"time"

	. "github.com/mechanic-ink/hurricane/frontend/components/common/header"
	. "github.com/mechanic-ink/hurricane/frontend/components/common/footer"
)


type page struct {
	vecty.Core
	Running bool
	Counter uint64
	SpeedCounter uint64
	TimeLeft uint
}

func Index() *page {
	return &page{}
}

func (p *page) Render() vecty.ComponentOrHTML {
	return <div class="flex flex-col min-h-screen overflow-hidden">
		<Header/>
		<main class="grow text-center justify-center">
			<h1 class="text-4xl">About</h1>
			<p>
				Hurricane is a full-stack development solution for golang, 
				with the ability to write code in a similar style to JSX.<br/>
				Write your own fullstack SPA in golang today!
			</p>
			<button class="btn-primary" onClick={p.Count}>
				CLICK ME
			</button>
			<p>Count: {vecty.Text(fmt.Sprintf("%d", p.Counter))}</p>
			<br/>
			<button class="btn-primary" onclick="startSpeedCountFromGo()">
				COUNTER {vecty.Text(fmt.Sprintf("%d", p.TimeLeft))}
			</button>
			<div>Count: <div id="counter">{vecty.Text(fmt.Sprintf("%d", p.SpeedCounter))}</div></div>
			<br/>
			{router.Link("/", "Back to main page", router.LinkOptions{Class:"underline"})}
		</main>
		<Footer/>
	</div>
}

func (p *page) Count(event *vecty.Event) {
	fmt.Println("o yea we countin")
	fmt.Println(p.Counter)
	p.Counter++
	vecty.Rerender(p)
}

var lock sync.Mutex
var isCounting bool